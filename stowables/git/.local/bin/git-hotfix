#!/usr/bin/env bash

#==================================================
# SETUP DEBUGGING AND SAFETY FLAGS
#==================================================
set -o errexit  # exit script on error
set -o pipefail # exit when a script in a pipeline fails
set -o nounset  # don't allow unset variables


if ! [[ -x "$(command -v jira)" ]]; then
  echo "jira-cli is not installed. Please install it by running './system-installer' in your dotfiles repo"
  exit 1
fi

source $HOME/.bash_secrets

team=$(awk '/^team:/{print $2}' $HOME/.config/.jira/.config.yml)

if [[ -z "$team" ]]; then
  declare -A teams

  teams["Team 1"]="fc08a702-0719-4e5b-a5d8-1bb7ea2ff626"
  teams["Team 2"]="daf6d01e-fe73-4a8b-8fc0-c83c9b18b559"
  teams["DevOps"]="849470b7-24e4-4471-abe3-9f9dafa82f16"

  team=${teams[$(printf "%s\n" "${!teams[@]}" | fzf --prompt "Select a team: ")]}
  [[ -n "$team" ]] && echo "team: $team" >> $HOME/.config/.jira/.config.yml
fi

current_sprint_id=$(jira sprint list --plain --state active --no-headers | head -n 1 | awk '{print $1}')
jira_user=$(jira me)


output=$(jira issue create \
    --assignee $jira_user \
    --reporter $jira_user \
    --priority "High" \
    --type "Hotfix" \
    --custom story-points=2 \
    --custom sprint=$current_sprint_id \
    --custom team=$team \
    | tee /dev/tty)

issue_key=$(echo "$output" | grep -o 'DYN-[0-9]*$' | tail -n 1)

jira issue move $issue_key "To Do" 1> /dev/null

echo -e "\nChecking out branch for issue $issue_key..."

git jchk $issue_key
