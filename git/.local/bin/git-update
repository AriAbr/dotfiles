#!/usr/bin/env bash

#==================================================
# SETUP DEBUGGING AND SAFETY FLAGS
#==================================================
set -o errexit  # exit script on error
set -o pipefail # exit when a script in a pipeline fails
set -o nounset  # don't allow unset variables

# Add prefix to stdout/stderr so we know where output is coming from
exec &> >(sed 's/^/[git-update] /')

git fetch --all >/dev/null

update() {
	# Only check for changes in lock file if one exists
	if [ -f poetry.lock ]; then
		# Check for changes in incoming poetry lock file.
		# Can't use `git diff` here since the changes are on the same branch
		OLD_POETRY_LOCK=$(cat poetry.lock)

		NEW_POETRY_LOCK=$(git show origin/master:poetry.lock)

		if [[ "$OLD_POETRY_LOCK" != "$NEW_POETRY_LOCK" ]]; then
			echo $'\nPOETRY CHANGES FOUND: Run `dm poetry install` to update your packages'
		fi

	fi

	# Only check for changes in lock file if one exists
	if [ -f yarn.lock ]; then
		# Check for changes in incoming yarn lock file.
		# Can't use `git diff` here since the changes are on the same branch
		OLD_YARN_LOCK=$(cat yarn.lock)

		NEW_YARN_LOCK=$(git show origin/master:yarn.lock)

		if [[ "$OLD_YARN_LOCK" != "$NEW_YARN_LOCK" ]]; then
			echo $'\nYARN CHANGES FOUND: Update your packages before continuing'
		fi

	fi

	git pull --rebase origin master >/dev/null

}

# Force Update
while getopts ":f" opt; do
	case $opt in
	f)
		echo "Forcing update"
		update
		exit 0
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;

	esac
done

INCOMING_MIGRATIONS=$(git diff origin/master --diff-filter=DM --name-status -- '*/migrations/*' ':^*/tests/*' :^tests | cut -f5 -d' ')
YOUR_MIGRATIONS=$(git diff origin/master --diff-filter=AM --name-status -- '*/migrations/*' ':^*/tests/*' :^tests | cut -f5 -d' ')

if [[ $INCOMING_MIGRATIONS != "" && $YOUR_MIGRATIONS != "" ]]; then
	# Warn and abort if update would cause migration conflict
	echo "git update aborted to avoid migration conflict."
	echo
	echo 'Incoming migrations:'
	echo $INCOMING_MIGRATIONS | sed 's/\(.py \)/.py\n/g' | awk '{print substr( $0, 3 )}' | sort | sed -E 's/(.*)/\t- \1/'
	echo 'Your migrations:'
	echo $YOUR_MIGRATIONS | sed 's/\(.py \)/.py\n/g' | awk '{print substr( $0, 3 )}' | sort | sed -E 's/(.*)/\t- \1/'
	echo
	echo 'Roll back and delete your migrations, then try again.'
	echo 'For more info, see here: https://valmardynamics.atlassian.net/wiki/spaces/DKB/pages/1320353976/Resolving+migration+conflicts'
	echo "Would you like to merge anyway? [yY] "
	read -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		# do dangerous stuff
		update
	fi
else
	update
fi
